name: Verify terraform module
description: "GitHub Action to run through the lifecycle for a terraform module: deploy, verify deploy, destroy, and verify destroy"
inputs:
  clusterId:
    description: The identifier of the cluster onto which the module should be deployed
    required: true
  validateDeployScript:
    description: Script to validate deployment environment
    required: false
    default: ""
  testStagesDir:
    description: The directory where the test stages are located
    default: test/stages
    required: false
  testModuleDir:
    description: The directory where the current module will be copied
    default: module
    required: false
  workspace:
    description: The directory where the terraform workspace should be created
    default: /tmp/workspace
    required: false
  configBaseUrl:
    description: The base url where the terraform.tfvars file can be found for the clusterId. Expected to resolve to {configBaseUrl}/{clusterId}/terraform.tfvars
    default: "https://raw.githubusercontent.com/ibm-garage-cloud/action-module-verify/main/env"
    required: false
  testPlan:
    description: Flag indicating that the plan should be tested after the apply to ensure there are no changes
    default: "false"
    required: false
runs:
  using: "composite"
  steps:
    - name: Setup ${{ inputs.clusterId }} terraform.tfvars
      id: setup-terraform
      shell: bash
      run: |
        echo "*** Setup ${{ inputs.clusterId }} terraform.tfvars ***"

        mkdir -p ${{ inputs.workspace }}/${{ inputs.testModuleDir }}
        cp -R ${{ inputs.testStagesDir }}/* ${{ inputs.workspace }}
        cp -R . ${{ inputs.workspace }}/${{ inputs.testModuleDir }}

        NAMESPACE=$(echo "${GITHUB_REPOSITORY}" | sed -E "s~.*/~~g" | sed -E "s/terraform-//g")

        cd ${{ inputs.workspace }}

        echo "++ Retrieving terraform.tfvars from ${{ inputs.configBaseUrl }}/${{ inputs.clusterId }}/terraform.tfvars"

        if curl -sL ${{ inputs.configBaseUrl }}/${{ inputs.clusterId }}/terraform.tfvars 1> /dev/null; then
          curl -Lo terraform.tfvars ${{ inputs.configBaseUrl }}/${{ inputs.clusterId }}/terraform.tfvars
          
          TFVARS_CONTENT=$(cat terraform.tfvars)
          if [[ "${TFVARS_CONTENT}" == "404: Not Found" ]]; then
            echo "Terraform config not found"
            echo "" > terraform.tfvars
          fi
        else
          echo "No terraform.tfvars file found"
          echo "" > terraform.tfvars
        fi
        echo "namespace=\"${NAMESPACE}\"" >> terraform.tfvars

        echo "++ terraform.tfvars"
        cat terraform.tfvars

        echo "::set-output name=namespace::$NAMESPACE"

    # Deploy
    - name: Deploy ${{ inputs.clusterId }}
      shell: bash
      env:
        TF_LOG_PROVIDER: DEBUG      
      run: |
        echo "*** Deploy ${{ inputs.clusterId }} ***"

        if [[ -f .env ]]; then
          echo "++ Loading config from .env file"
          source .env
        fi

        cd ${{ inputs.workspace }}
        export REPO_NAME="${{ github.event.repository.name }}"
        echo "Repository: $REPO_NAME"
        $GITHUB_ACTION_PATH/scripts/apply.sh || exit 1
        
        if [[ "${{ inputs.testPlan }}" == "true" ]]; then
          echo "Testing plan after apply"
          terraform plan -detailed-exitcode
        fi

    # Test deploy
    - name: Validate deploy ${{ inputs.clusterId }}
      shell: bash
      env:
        TF_LOG_PROVIDER: DEBUG      
      run: |
        echo "*** Validate deploy ${{ inputs.clusterId }} ***"

        if [[ -f .env ]]; then
          echo "++ Loading config from .env file"
          source .env
        fi

        ROOT_DIR="$PWD"

        cd ${{ inputs.workspace }}
        $GITHUB_ACTION_PATH/scripts/validate-deploy.sh ${{ inputs.clusterId }} ${{ steps.setup-terraform.outputs.namespace }} "${CONSOLE_LINK_NAME}" "$ROOT_DIR/${{ inputs.validateDeployScript }}"
